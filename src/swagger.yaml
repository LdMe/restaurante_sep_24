openapi: 3.0.3
info:
  title: Restaurante
  version: 1.0.0
  description: API para el proyecto de restaurante
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    email: 6Qq0d@example.com
  termsOfService: http://swagger.io/terms/
servers:
  - url: http://localhost:8080

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        email:
          type: string
        role:
          type: string
        local_id:
          type: integer
          format: int64
        local_name:
          type: string

    Token:
      type: object
      properties:
        token:
          type: string

    Error:
      type: object
      properties:
        message:
          type: string

paths:
  /api/user:
    get:
      summary: Get all users
      description: Get all users
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
  
  /api/user/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a user by their ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
    put:
      summary: Update user
      description: Update a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
    delete:
      summary: Delete user
      description: Delete a user by their ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The user ID
      responses:
        200:
          description: User deleted
        404:
          description: User not found
